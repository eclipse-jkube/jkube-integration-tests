#
# Copyright (c) 2019 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at:
#
#     https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#
name: JKube Integration Tests

on:
  push:
    branches:
      - '**'
  schedule:
    - cron: '0 1 * * *' # Everyday at 1
  repository_dispatch:

env:
  JKUBE_REPOSITORY: https://github.com/jkubeio/jkube.git
  JKUBE_REVISION: master

jobs:
  minikube:
    name: Generic Test using Minikube
    runs-on: ubuntu-latest
    strategy:
      matrix:
        minikube: [v1.5.1]
        kubernetes: [v1.16.2,v1.12.0]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v1.0.0
        with:
          minikube version: ${{ matrix.minikube }}
          kubernetes version: ${{ matrix.kubernetes }}
      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Checkout JKube (Default Revision)
        if: github.event.action != 'jkube_webhook'
        run: |
          git clone "$JKUBE_REPOSITORY" \
          && cd ./jkube \
          && git checkout "$JKUBE_REVISION" \
          && cd ..
      - name: Checkout JKube (Dispatched Revision)
        if: github.event.action == 'jkube_webhook'
        run: |
          git clone "${{ github.event.client_payload.repository }}" \
          && cd ./jkube \
          && git checkout "${{ github.event.client_payload.revision }}" \
          && cd ..
      - name: Install jkube VCS Revision
        run: mvn -f ./jkube -B -DskipTests clean install
      - name: Install and Run Integration Tests
        run: ./mvnw -B -PKubernetes clean verify
      - name: Consolidate reports
        run: |
          mkdir -p ./reports/zero-config/spring-boot \
          && cp -R ./it/target/failsafe-reports ./reports \
          && cp -R ./projects-to-be-tested/zero-config/spring-boot/target/docker ./reports/zero-config/spring-boot \
          && cp -R ./projects-to-be-tested/zero-config/spring-boot/target/classes/META-INF ./reports/zero-config/spring-boot
      - name: Save reports as artifact
        uses: actions/upload-artifact@master
        with:
          name: Test reports (Minikube ${{ matrix.minikube }}-${{ matrix.kubernetes }})
          path: ./reports
  openshift:
    name: Generic Test using OpenShift Cluster
    runs-on: ubuntu-latest
    strategy:
      matrix:
        openshift: [v3.11.0,v3.9.0]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup OpenShift
        uses: manusa/actions-setup-openshift@v1.0.1
        with:
          oc version: ${{ matrix.openshift }}
      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Checkout JKube (Default Revision)
        if: github.event.action != 'jkube_webhook'
        run: |
          git clone "$JKUBE_REPOSITORY" \
          && cd ./jkube \
          && git checkout "$JKUBE_REVISION" \
          && cd ..
      - name: Checkout JKube (Dispatched Revision)
        if: github.event.action == 'jkube_webhook'
        run: |
          git clone "${{ github.event.client_payload.repository }}" \
          && cd ./jkube \
          && git checkout "${{ github.event.client_payload.revision }}" \
          && cd ..
      - name: Install jkube VCS Revision
        run: mvn -f ./jkube -B -DskipTests clean install
      - name: Install and Run Integration Tests
        run: ./mvnw -B -POpenShift clean verify
      - name: Consolidate reports
        run: |
          mkdir -p ./reports/zero-config/spring-boot \
          && cp -R ./it/target/failsafe-reports ./reports \
          && cp -R ./projects-to-be-tested/zero-config/spring-boot/target/docker ./reports/zero-config/spring-boot \
          && cp -R ./projects-to-be-tested/zero-config/spring-boot/target/classes/META-INF ./reports/zero-config/spring-boot
      - name: Save reports as artifact
        uses: actions/upload-artifact@master
        with:
          name: Test reports (OpenShift ${{ matrix.openshift }})
          path: ./reports
